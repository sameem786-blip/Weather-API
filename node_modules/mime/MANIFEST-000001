d. Instead you may need to do:
   * ```dart
   * Uint64List.view(other.buffer, other.offsetInBytes, count)
   * ```
   * Alternatively, use [Uint64List.sublistView]
   * which includes this computation:
   * ```dart
   * Uint64List.sublistView(other, 0, count);
   * ```
   * (The third argument is an end index rather than a length, so if
   * you start from a position greater than zero, you need not
   * reduce the count correspondingly).
   */
  factory Uint64List.view(ByteBuffer buffer,
      [int offsetInBytes = 0, int? length]) {
    return buffer.asUint64List(offsetInBytes, length);
  }

  /**
   * Creates a [Uint64List] view on a range of elements of [data].
   *
   * Creates a view on the range of `data.buffer` which corresponds
   * to the elements of [data] from [start] until [end].
   * If [data] is a typed data list, like [Uint16List], then the view is on
   * the bytes of the elements with indices from [start] until [end].
   * If [data] is a [ByteData], it's treated like a list of bytes.
   *
   * If provided, [start] and [end] must satisfy
   *
   * 0 &le; `start` &le; `end` &le; *elementCount*
   *
   * where *elementCount* is the number of elements in [data], which
   * is the same as the [List.length] of a typed data list.
   *
   * If omitted, [start] defaults to zero and [end] to *elementCount*.
   *
   * The start and end indices of the range of bytes being viewed must be
   * multiples of eight.
   */
  @Since("2.8")
  factory Uint64List.sublistView(TypedData data, [int start = 0, int? end]) {
    int elementSize = data.elementSizeInBytes;
    end = RangeError.checkValidRange(
        start, end, data.lengthInBytes ~/ elementSize);
    if (end == null) throw "unreachable"; // TODO(38725)
    int byteLength = (end - start) * elementSize;
    if (byteLength % bytesPerEl